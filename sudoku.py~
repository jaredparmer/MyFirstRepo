#!/usr/bin/env python3

import turtle
import random

# initializes puzzle with all 0s
def init_puzzle():
    puzzle = [[0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0]]
    return puzzle

# generates randomly filled puzzle, only checks for row validity
def make_puzzle():
    puzzle = []
    for i in range(0, 9):
        row = []
        while len(row) != 9:
            candidate = random.randint(1,9)
            if candidate not in row:
                row.append(candidate)
        puzzle.append(row)
    return puzzle

# postcondition: turtle t at origin, facing east, pen is up
def draw_board(t, box_size):
    # initialize pen and draw first set of boxes
    t.pu()
    t.goto(box_size * 4.5, box_size * 4.5)
    t.seth(180)
    t.pd()
    for i in range(10):
        if i % 3 == 0:
            t.width(2)
        else:
            t.width(1)
        draw_box(t, box_size * i)

    # initialize pen and draw second set of boxes
    t.pu()
    t.goto(box_size * -4.5, box_size * -4.5)
    t.lt(180)
    t.pd()

    # range is only 9 because outermost box already drawn
    for i in range(9):
        if i % 3 == 0:
            t.width(2)
        else:
            t.width(1)
        draw_box(t, box_size * i)

    # return pen to origin, facing east, pen down
    t.pu()
    t.goto(0, 0)

# draws a single box with lengths of given size
# precondition: turtle pen is down
# postcondition: turtle facing same as before fn call
def draw_box(t, size):
    for i in range(4):
       t.fd(size)
       t.lt(90)

# prints puzzle in makeshift board in console, faster for debugging
def print_puzzle(puzzle):
    for i in range(len(puzzle)):
        if i % 3 == 0:
            print('-------------------------')
        for j in range(len(puzzle[i])):
            if j % 3 == 0:
                print('|', end= ' ')
            print(puzzle[i][j], end=' ')
        print('|')
    print('-------------------------')

# postcondition: all non-zero values filled into board, pen is up
def fill_board(t, puzzle, box_size):
    # initialize pen
    t.pu()
    t.goto(box_size * -4.5 + box_size * (1/2), 
            box_size * 3.5 + box_size * (1/4))
    t.pd()

    # fill boxes with elements from puzzle
    for i in range(len(puzzle)):
        for j in range(len(puzzle[i])):
            if puzzle[i][j] != 0:
                t.write(str(puzzle[i][j]), move=False, align="center", 
                        font=("Arial", 12, "normal"))
            t.pu()
            t.fd(box_size)
            t.pd()
        t.pu()
        t.bk(box_size * 9)
        t.rt(90)
        t.fd(box_size)
        t.lt(90)
        t.pd()
    t.pu()

# preconditions: x and y be within the range of the grid's row and columns
# postcondition: turtle t is pen down in cell (x, y) of grid
def pen_to_cell(t, x, y, box_size):
    # initialize pen to cell (0, 0) of grid, facing east
    t.pu()
    t.goto(box_size * -4.5 + box_size * (1/2), 
            box_size * 3.5 + box_size * (1/4))
    t.seth(0)

    # move pen to cell (x, y) of grid
    t.fd(y * box_size)
    t.rt(90)
    t.fd(x * box_size)

    # prep pen to fill cell (x, y)
    t.lt(90)
    t.pd()

# precondition: x and y be w/n range of grid, puzzle have corresponding value
# postcondition: cell (x, y) is filled with puzzle[x][y], pen is up
def fill_cell(t, x, y, puzzle, box_size):
    pen_to_cell(t, x, y, box_size)
    if puzzle[x][y] != 0:
        t.write(str(puzzle[x][y]), move=False, align="center",
                font=("Arial", 12, "normal"))
    t.pu()

def used_in_row(puzzle, row, candidate):
    for i in range(9):
        if puzzle[row][i] == candidate:
            return True
    return False

def used_in_col(puzzle, col, candidate):
    for i in range(9):
        if puzzle[i][col] == candidate:
            return True
    return False

def used_in_box(puzzle, row, col, candidate):
    box_r = row - (row % 3)
    box_c = col - (col % 3)
    for i in range(3):
        for j in range(3):
            if puzzle[box_r + i][box_c + j] == candidate:
                return True
    return False

def solve_puzzle(puzzle):
    if puzzle_is_complete(puzzle):
        return True

    # traverse entire puzzle, by row and column
    for row in range(9):
        for col in range(9):
            # verify present cell is empty
            if puzzle[row][col] == 0:
                for candidate in range(1, 10):
                    if (not used_in_row(puzzle, row, candidate) and
                        not used_in_col(puzzle, col, candidate) and
                        not used_in_box(puzzle, row, col, candidate)):
                        # if all met, candidate looks good; tentatively assign
                        puzzle[row][col] = candidate
                        if solve_puzzle(puzzle):
                            return True
                        # otherwise, candidate is bad; unassign and try again
                        puzzle[row][col] = 0

    return False

def puzzle_is_complete(puzzle):
    for row, col in zip(range(9), range(9)):
        if puzzle[row][col] == 0:
            return False
    return True

def main():
    puzzle = init_puzzle()
    print_puzzle(puzzle)
    if puzzle_is_complete(puzzle):
        print("Puzzle is complete!")
    else:
        print("nope!")

    puzzle = make_puzzle()
    print_puzzle(puzzle)
    if puzzle_is_complete(puzzle):
        print("Puzzle is complete!")
    else:
        print("nope!")

"""
    if(solve_puzzle(puzzle)):
        print_puzzle()
    else:
        print("No solution exists!")
"""
""" commenting out drawings while debugging
    pen = turtle.Turtle()
    box_size = 30
    pen.speed(0)
    draw_board(pen, box_size)
    fill_board(pen, puzzle, box_size)
    pen.hideturtle()
    turtle.mainloop() 
    """

if __name__ == '__main__':
    main()
